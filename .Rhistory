setwd("~/Users/Aura Maria/DataVisualization/DVR_Project2/01 Data in R/CVSs")
file_path <- "TechCrunchcontinentalUSA.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
setwd("~/Aura Maria/DataVisualization/DVR_Project2/01 Data in R/CVSs")
getwd()
setwd("~Users/Aura Maria/Documents/DataVisualization/DVR_Project2/01 Data in R/CVSs")
setwd("C:/Users/Aura Maria/Documents/DataVisualization/DVR_Project2/01 Data in R/CVSs")
setwd("C:/Users/Aura Maria/Documents/DataVisualization/DVR_Project2 in R/CVSs")
setwd("C:/Users/Aura Maria/Documents/DataVisualization/DVR_Project2 in R/Data 01")
setwd("~/DataVisualization/DV_RProject2/01 Data")
getwd()
setwd("C:/Users/Aura Maria/Documents/DataVisualization/DVR_Project2/01 Data in R/CSVs")
setwd("C:/Users/Aura Maria/Documents/DataVisualization/DVR_Project2/01 Data in R/CSVs")
file_path <- "TechCrunchcontinentalUSA.csv"
setwd("C:/Users/Aura Maria/Documents/DataVisualization/DVR_Project2/01 Data in R/CSVs")
setwd("~/DataVisualization/DV_RProject2/01 Data/CVSs")
file_path <- "TechCrunchcontinentalUSA.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
dimensions
setwd("~/DataVisualization/DV_RProject2/01 Data/CVSs")
file_path <- "TechCrunchcontinentalUSA.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("numEmps", "raisedAmt")
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
dimensions
measures
setwd("~/DataVisualization/DV_RProject2/01 Data/CVSs")
file_path <- "TechCrunchcontinentalUSA.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("numEmps", "raisedAmt")
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
# replace 'NA' in data numEmps 0
}
}
# Make all state data do upper case
df["state"] <- data.frame(lapply(df["State"], toupper))
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
setwd("~/DataVisualization/DV_RProject2/01 Data/CVSs")
file_path <- "TechCrunchcontinentalUSA.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("numEmps", "raisedAmt")
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
# replace 'NA' in data numEmps 0
}
}
# Make all state data do upper case
df["state"] <- data.frame(lapply(df["State"], toupper))
df$fundedDate  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$fundedDate),  tz="UTC")))
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from TechCrunchcontinentalUSA"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_ams6624', PASS='orcl_ams6624', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df
summary(df)
head(df)
tmp <- head(df, 20)
tmp
tmp[1, c('company', 'city', 'state')] # Show the first row of tmp.
tmp <- head(diamonds, 20)
tmp
tmp[1, c('carat', 'cut', 'color')] # Show the first row of tmp.
tmp <- df1
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your UTEid
df1 <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from TechCrunchcontinentalUSA"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_ams6624', PASS='orcl_ams6624', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
summary(df1)
tmp <- df1
tmp
tmp[, c('COMPANY', 'CATEGORY', 'CITY', 'STATE'),] # Show the first row of tmp.
grep("CA", tmp$STATE, perl=TRUE, value=FALSE)
grep("TX", tmp$STATE, perl=TRUE, value=FALSE) %>% tmp[., c('COMPANY', 'CITY', 'STATE', 'CATEGORY')] %>% tbl_df
library("bitops", lib.loc="~/R/win-library/3.2")
library("dplyr", lib.loc="~/R/win-library/3.2")
grep("TX", tmp$STATE, perl=TRUE, value=FALSE) %>% tmp[., c('COMPANY', 'CITY', 'STATE', 'CATEGORY')] %>% tbl_df
test <- grep("TX", tmp$STATE, perl=TRUE, value=FALSE) %>% tmp[., c('COMPANY', 'CITY', 'STATE', 'CATEGORY')] %>% tbl_df
view(test)
library("tidyr", lib.loc="~/R/win-library/3.2")
detach("package:tidyr", unload=TRUE)
View(test)
test2 <- grep("^[sS]", tmp$COMPANY, perl=TRUE, value=FALSE) %>% tmp[., c('COMPANY', 'CITY', 'STATE', 'CATEGORY')] %>% tbl_df
view(test2)
View(test2)
tbl_df(diamonds)
require(tidyr)
require(dplyr)
require(ggplot2)
tbl_df(diamonds)
View(diamonds)
select(diamonds, cut, clarity) %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds;
diamonds %>% select(cut, clarity) %>% tbl_df
diamonds %>% select(., cut, clarity) %>% tbl_df
diamonds %>% select(color:price) %>% tbl_df # Equivalent SQL: none
diamonds %>% select(-cut, -clarity) %>% tbl_df # Equivalent SQL: none
x <- diamonds %>% select(cut, clarity) %>% tbl_df
x
# filter
diamonds %>% select(cut, clarity) %>% filter(cut == "Good") %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds where cut = 'Good';
diamonds %>% select(cut, clarity) %>% filter(cut %in% c("Good", "Fair")) %>% tbl_df
diamonds %>% select(cut, clarity) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1") %>% tbl_df
diamonds %>% select(cut, clarity) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1" | is.na(cut)) %>% tbl_df
diamonds %>% filter(carat > 2) %>% select(cut, clarity) %>% tbl_df # This does not give an error.
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x)) %>% tbl_df
diamonds %>% arrange(carat) %>% tbl_df
diamonds %>% rename(tbl= table) %>% tbl_df
diamonds %>% select(cut, clarity, x, y, z) %>% filter(cut %in% c("Good", "Fair"), clarity == "VS1" | is.na(cut)) %>% mutate(sum = x+y+z) %>% tbl_df
